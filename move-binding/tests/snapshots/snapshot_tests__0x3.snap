---
source: move-binding/tests/snapshot_tests.rs
expression: pretty
---
pub mod sui_system {
    pub const PACKAGE_VERSION: u64 = 20u64;
    pub mod genesis {
        use std::str::FromStr;
        use move_binding_derive::{MoveStruct, Key};
        use move_types::{MoveType, Address, Identifier, ObjectId};
        use move_types::functions::{Arg, Ref, MutRef};
        pub const PACKAGE_ID: Address = Address::new([
            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 3u8,
        ]);
        pub const MODULE_NAME: &str = "genesis";
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct)]
        pub struct GenesisChainParameters {
            pub protocol_version: u64,
            pub chain_start_timestamp_ms: u64,
            pub epoch_duration_ms: u64,
            pub stake_subsidy_start_epoch: u64,
            pub stake_subsidy_initial_distribution_amount: u64,
            pub stake_subsidy_period_length: u64,
            pub stake_subsidy_decrease_rate: u16,
            pub max_validator_count: u64,
            pub min_validator_joining_stake: u64,
            pub validator_low_stake_threshold: u64,
            pub validator_very_low_stake_threshold: u64,
            pub validator_low_stake_grace_period: u64,
        }
        impl GenesisChainParameters {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct)]
        pub struct GenesisValidatorMetadata {
            pub name: Vec<u8>,
            pub description: Vec<u8>,
            pub image_url: Vec<u8>,
            pub project_url: Vec<u8>,
            pub sui_address: Address,
            pub gas_price: u64,
            pub commission_rate: u64,
            pub protocol_public_key: Vec<u8>,
            pub proof_of_possession: Vec<u8>,
            pub network_public_key: Vec<u8>,
            pub worker_public_key: Vec<u8>,
            pub network_address: Vec<u8>,
            pub p2p_address: Vec<u8>,
            pub primary_address: Vec<u8>,
            pub worker_address: Vec<u8>,
        }
        impl GenesisValidatorMetadata {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct)]
        pub struct TokenAllocation {
            pub recipient_address: Address,
            pub amount_mist: u64,
            pub staked_with_validator: Option<Address>,
        }
        impl TokenAllocation {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct)]
        pub struct TokenDistributionSchedule {
            pub stake_subsidy_fund_mist: u64,
            pub allocations: Vec<crate::sui_system::genesis::TokenAllocation>,
        }
        impl TokenDistributionSchedule {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        pub fn allocate_tokens<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>>,
            p1: Arg<Vec<crate::sui_system::genesis::TokenAllocation>>,
            p2: MutRef<'a, Vec<crate::sui_system::validator::Validator>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("allocate_tokens").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                );
        }
        pub fn create<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Arg<ObjectId>,
            p1: Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>>,
            p2: Arg<crate::sui_system::genesis::GenesisChainParameters>,
            p3: Arg<Vec<crate::sui_system::genesis::GenesisValidatorMetadata>>,
            p4: Arg<crate::sui_system::genesis::TokenDistributionSchedule>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            let p3 = p3.resolve_arg(builder);
            let p4 = p4.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("create").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into(), p3.into(), p4.into()],
                );
        }
    }
    pub mod stake_subsidy {
        use std::str::FromStr;
        use move_binding_derive::{MoveStruct, Key};
        use move_types::{MoveType, Address, Identifier, ObjectId};
        use move_types::functions::{Arg, Ref, MutRef};
        pub const PACKAGE_ID: Address = Address::new([
            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 3u8,
        ]);
        pub const MODULE_NAME: &str = "stake_subsidy";
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct)]
        pub struct StakeSubsidy {
            pub balance: crate::sui::balance::Balance<crate::sui::sui::SUI>,
            pub distribution_counter: u64,
            pub current_distribution_amount: u64,
            pub stake_subsidy_period_length: u64,
            pub stake_subsidy_decrease_rate: u16,
            pub extra_fields: crate::sui::bag::Bag,
        }
        impl StakeSubsidy {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        pub fn advance_epoch<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::stake_subsidy::StakeSubsidy>,
        ) -> Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("advance_epoch").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn create<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>>,
            p1: Arg<u64>,
            p2: Arg<u64>,
            p3: Arg<u16>,
        ) -> Arg<crate::sui_system::stake_subsidy::StakeSubsidy> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            let p3 = p3.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("create").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into(), p3.into()],
                )
                .into()
        }
        pub fn current_epoch_subsidy_amount<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::stake_subsidy::StakeSubsidy>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("current_epoch_subsidy_amount").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn get_distribution_counter<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::stake_subsidy::StakeSubsidy>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("get_distribution_counter").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
    }
    pub mod staking_pool {
        use std::str::FromStr;
        use move_binding_derive::{MoveStruct, Key};
        use move_types::{MoveType, Address, Identifier, ObjectId};
        use move_types::functions::{Arg, Ref, MutRef};
        pub const PACKAGE_ID: Address = Address::new([
            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 3u8,
        ]);
        pub const MODULE_NAME: &str = "staking_pool";
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct, Key)]
        pub struct FungibleStakedSui {
            pub id: ObjectId,
            pub pool_id: ObjectId,
            pub value: u64,
        }
        impl FungibleStakedSui {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct, Key)]
        pub struct FungibleStakedSuiData {
            pub id: ObjectId,
            pub total_supply: u64,
            pub principal: crate::sui::balance::Balance<crate::sui::sui::SUI>,
        }
        impl FungibleStakedSuiData {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct)]
        pub struct FungibleStakedSuiDataKey {
            pub dummy_field: bool,
        }
        impl FungibleStakedSuiDataKey {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct)]
        pub struct PoolTokenExchangeRate {
            pub sui_amount: u64,
            pub pool_token_amount: u64,
        }
        impl PoolTokenExchangeRate {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct, Key)]
        pub struct StakedSui {
            pub id: ObjectId,
            pub pool_id: ObjectId,
            pub stake_activation_epoch: u64,
            pub principal: crate::sui::balance::Balance<crate::sui::sui::SUI>,
        }
        impl StakedSui {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct, Key)]
        pub struct StakingPool {
            pub id: ObjectId,
            pub activation_epoch: Option<u64>,
            pub deactivation_epoch: Option<u64>,
            pub sui_balance: u64,
            pub rewards_pool: crate::sui::balance::Balance<crate::sui::sui::SUI>,
            pub pool_token_balance: u64,
            pub exchange_rates: crate::sui::table::Table<
                u64,
                crate::sui_system::staking_pool::PoolTokenExchangeRate,
            >,
            pub pending_stake: u64,
            pub pending_total_sui_withdraw: u64,
            pub pending_pool_token_withdraw: u64,
            pub extra_fields: crate::sui::bag::Bag,
        }
        impl StakingPool {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        pub fn activate_staking_pool<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::staking_pool::StakingPool>,
            p1: Arg<u64>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("activate_staking_pool").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn calculate_fungible_staked_sui_withdraw_amount(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Arg<crate::sui_system::staking_pool::PoolTokenExchangeRate>,
            p1: Arg<u64>,
            p2: Arg<u64>,
            p3: Arg<u64>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            let p3 = p3.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str(
                                "calculate_fungible_staked_sui_withdraw_amount",
                            )
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into(), p3.into()],
                )
                .into()
        }
        pub fn check_balance_invariants<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::staking_pool::StakingPool>,
            p1: Arg<u64>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("check_balance_invariants").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn convert_to_fungible_staked_sui<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::staking_pool::StakingPool>,
            p1: Arg<crate::sui_system::staking_pool::StakedSui>,
        ) -> Arg<crate::sui_system::staking_pool::FungibleStakedSui> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("convert_to_fungible_staked_sui").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn deactivate_staking_pool<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::staking_pool::StakingPool>,
            p1: Arg<u64>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("deactivate_staking_pool").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn deposit_rewards<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::staking_pool::StakingPool>,
            p1: Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("deposit_rewards").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn exchange_rates<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::staking_pool::StakingPool>,
        ) -> Ref<
            'a,
            crate::sui::table::Table<
                u64,
                crate::sui_system::staking_pool::PoolTokenExchangeRate,
            >,
        > {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("exchange_rates").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn fungible_staked_sui_pool_id<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::staking_pool::FungibleStakedSui>,
        ) -> Arg<ObjectId> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("fungible_staked_sui_pool_id").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn fungible_staked_sui_value<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::staking_pool::FungibleStakedSui>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("fungible_staked_sui_value").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn get_sui_amount<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::staking_pool::PoolTokenExchangeRate>,
            p1: Arg<u64>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("get_sui_amount").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn get_token_amount<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::staking_pool::PoolTokenExchangeRate>,
            p1: Arg<u64>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("get_token_amount").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn initial_exchange_rate(
            builder: &mut sui_transaction_builder::TransactionBuilder,
        ) -> Arg<crate::sui_system::staking_pool::PoolTokenExchangeRate> {
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("initial_exchange_rate").unwrap(),
                        vec![],
                    ),
                    vec![],
                )
                .into()
        }
        pub fn is_equal_staking_metadata<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::staking_pool::StakedSui>,
            p1: Ref<'a, crate::sui_system::staking_pool::StakedSui>,
        ) -> Arg<bool> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("is_equal_staking_metadata").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn is_inactive<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::staking_pool::StakingPool>,
        ) -> Arg<bool> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("is_inactive").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn is_preactive<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::staking_pool::StakingPool>,
        ) -> Arg<bool> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("is_preactive").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn is_preactive_at_epoch<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::staking_pool::StakingPool>,
            p1: Arg<u64>,
        ) -> Arg<bool> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("is_preactive_at_epoch").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn join_fungible_staked_sui<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::staking_pool::FungibleStakedSui>,
            p1: Arg<crate::sui_system::staking_pool::FungibleStakedSui>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("join_fungible_staked_sui").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn join_staked_sui<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::staking_pool::StakedSui>,
            p1: Arg<crate::sui_system::staking_pool::StakedSui>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("join_staked_sui").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn new<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
        ) -> Arg<crate::sui_system::staking_pool::StakingPool> {
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("new").unwrap(),
                        vec![],
                    ),
                    vec![],
                )
                .into()
        }
        pub fn pending_stake_amount<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::staking_pool::StakingPool>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("pending_stake_amount").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn pending_stake_withdraw_amount<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::staking_pool::StakingPool>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("pending_stake_withdraw_amount").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn pool_id<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::staking_pool::StakedSui>,
        ) -> Arg<ObjectId> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("pool_id").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn pool_token_amount<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::staking_pool::PoolTokenExchangeRate>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("pool_token_amount").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn pool_token_exchange_rate_at_epoch<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::staking_pool::StakingPool>,
            p1: Arg<u64>,
        ) -> Arg<crate::sui_system::staking_pool::PoolTokenExchangeRate> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("pool_token_exchange_rate_at_epoch")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn process_pending_stake<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::staking_pool::StakingPool>,
        ) {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("process_pending_stake").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                );
        }
        pub fn process_pending_stake_withdraw<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::staking_pool::StakingPool>,
        ) {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("process_pending_stake_withdraw").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                );
        }
        pub fn process_pending_stakes_and_withdraws<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::staking_pool::StakingPool>,
        ) {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("process_pending_stakes_and_withdraws")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                );
        }
        pub fn redeem_fungible_staked_sui<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::staking_pool::StakingPool>,
            p1: Arg<crate::sui_system::staking_pool::FungibleStakedSui>,
        ) -> Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("redeem_fungible_staked_sui").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn request_add_stake<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::staking_pool::StakingPool>,
            p1: Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>>,
            p2: Arg<u64>,
        ) -> Arg<crate::sui_system::staking_pool::StakedSui> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_add_stake").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                )
                .into()
        }
        pub fn request_withdraw_stake<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::staking_pool::StakingPool>,
            p1: Arg<crate::sui_system::staking_pool::StakedSui>,
        ) -> Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_withdraw_stake").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn split<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::staking_pool::StakedSui>,
            p1: Arg<u64>,
        ) -> Arg<crate::sui_system::staking_pool::StakedSui> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("split").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn split_fungible_staked_sui<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::staking_pool::FungibleStakedSui>,
            p1: Arg<u64>,
        ) -> Arg<crate::sui_system::staking_pool::FungibleStakedSui> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("split_fungible_staked_sui").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn split_staked_sui<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::staking_pool::StakedSui>,
            p1: Arg<u64>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("split_staked_sui").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn stake_activation_epoch<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::staking_pool::StakedSui>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("stake_activation_epoch").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn staked_sui_amount<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::staking_pool::StakedSui>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("staked_sui_amount").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn sui_amount<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::staking_pool::PoolTokenExchangeRate>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("sui_amount").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn sui_balance<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::staking_pool::StakingPool>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("sui_balance").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn unwrap_staked_sui(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Arg<crate::sui_system::staking_pool::StakedSui>,
        ) -> Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("unwrap_staked_sui").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn withdraw_from_principal<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::staking_pool::StakingPool>,
            p1: Arg<crate::sui_system::staking_pool::StakedSui>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("withdraw_from_principal").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn withdraw_rewards<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::staking_pool::StakingPool>,
            p1: Arg<u64>,
            p2: Arg<u64>,
            p3: Arg<u64>,
        ) -> Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            let p3 = p3.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("withdraw_rewards").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into(), p3.into()],
                )
                .into()
        }
    }
    pub mod storage_fund {
        use std::str::FromStr;
        use move_binding_derive::{MoveStruct, Key};
        use move_types::{MoveType, Address, Identifier, ObjectId};
        use move_types::functions::{Arg, Ref, MutRef};
        pub const PACKAGE_ID: Address = Address::new([
            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 3u8,
        ]);
        pub const MODULE_NAME: &str = "storage_fund";
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct)]
        pub struct StorageFund {
            pub total_object_storage_rebates: crate::sui::balance::Balance<
                crate::sui::sui::SUI,
            >,
            pub non_refundable_balance: crate::sui::balance::Balance<
                crate::sui::sui::SUI,
            >,
        }
        impl StorageFund {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        pub fn advance_epoch<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::storage_fund::StorageFund>,
            p1: Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>>,
            p2: Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>>,
            p3: Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>>,
            p4: Arg<u64>,
            p5: Arg<u64>,
        ) -> Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            let p3 = p3.resolve_arg(builder);
            let p4 = p4.resolve_arg(builder);
            let p5 = p5.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("advance_epoch").unwrap(),
                        vec![],
                    ),
                    vec![
                        p0.into(), p1.into(), p2.into(), p3.into(), p4.into(), p5.into()
                    ],
                )
                .into()
        }
        pub fn new(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>>,
        ) -> Arg<crate::sui_system::storage_fund::StorageFund> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("new").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn total_balance<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::storage_fund::StorageFund>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("total_balance").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn total_object_storage_rebates<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::storage_fund::StorageFund>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("total_object_storage_rebates").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
    }
    pub mod sui_system {
        use std::str::FromStr;
        use move_binding_derive::{MoveStruct, Key};
        use move_types::{MoveType, Address, Identifier, ObjectId};
        use move_types::functions::{Arg, Ref, MutRef};
        pub const PACKAGE_ID: Address = Address::new([
            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 3u8,
        ]);
        pub const MODULE_NAME: &str = "sui_system";
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct, Key)]
        pub struct SuiSystemState {
            pub id: ObjectId,
            pub version: u64,
        }
        impl SuiSystemState {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        pub fn active_validator_addresses<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
        ) -> Arg<Vec<Address>> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("active_validator_addresses").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn advance_epoch<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>>,
            p1: Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>>,
            p2: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p3: Arg<u64>,
            p4: Arg<u64>,
            p5: Arg<u64>,
            p6: Arg<u64>,
            p7: Arg<u64>,
            p8: Arg<u64>,
            p9: Arg<u64>,
        ) -> Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            let p3 = p3.resolve_arg(builder);
            let p4 = p4.resolve_arg(builder);
            let p5 = p5.resolve_arg(builder);
            let p6 = p6.resolve_arg(builder);
            let p7 = p7.resolve_arg(builder);
            let p8 = p8.resolve_arg(builder);
            let p9 = p9.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("advance_epoch").unwrap(),
                        vec![],
                    ),
                    vec![
                        p0.into(), p1.into(), p2.into(), p3.into(), p4.into(), p5.into(),
                        p6.into(), p7.into(), p8.into(), p9.into()
                    ],
                )
                .into()
        }
        pub fn convert_to_fungible_staked_sui<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Arg<crate::sui_system::staking_pool::StakedSui>,
        ) -> Arg<crate::sui_system::staking_pool::FungibleStakedSui> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("convert_to_fungible_staked_sui").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn create<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Arg<ObjectId>,
            p1: Arg<Vec<crate::sui_system::validator::Validator>>,
            p2: Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>>,
            p3: Arg<u64>,
            p4: Arg<u64>,
            p5: Arg<crate::sui_system::sui_system_state_inner::SystemParameters>,
            p6: Arg<crate::sui_system::stake_subsidy::StakeSubsidy>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            let p3 = p3.resolve_arg(builder);
            let p4 = p4.resolve_arg(builder);
            let p5 = p5.resolve_arg(builder);
            let p6 = p6.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("create").unwrap(),
                        vec![],
                    ),
                    vec![
                        p0.into(), p1.into(), p2.into(), p3.into(), p4.into(), p5.into(),
                        p6.into()
                    ],
                );
        }
        pub fn load_inner_maybe_upgrade<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
        ) -> MutRef<
            'a,
            crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
        > {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("load_inner_maybe_upgrade").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn load_system_state<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
        ) -> Ref<'a, crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("load_system_state").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn load_system_state_mut<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
        ) -> MutRef<
            'a,
            crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
        > {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("load_system_state_mut").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn pool_exchange_rates<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Ref<'a, ObjectId>,
        ) -> Ref<
            'a,
            crate::sui::table::Table<
                u64,
                crate::sui_system::staking_pool::PoolTokenExchangeRate,
            >,
        > {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("pool_exchange_rates").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn redeem_fungible_staked_sui<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Arg<crate::sui_system::staking_pool::FungibleStakedSui>,
        ) -> Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("redeem_fungible_staked_sui").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn report_validator<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Ref<
                'a,
                crate::sui_system::validator_cap::UnverifiedValidatorOperationCap,
            >,
            p2: Arg<Address>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("report_validator").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                );
        }
        pub fn request_add_stake<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Arg<crate::sui::coin::Coin<crate::sui::sui::SUI>>,
            p2: Arg<Address>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_add_stake").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                );
        }
        pub fn request_add_stake_mul_coin<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Arg<Vec<crate::sui::coin::Coin<crate::sui::sui::SUI>>>,
            p2: Arg<Option<u64>>,
            p3: Arg<Address>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            let p3 = p3.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_add_stake_mul_coin").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into(), p3.into()],
                );
        }
        pub fn request_add_stake_non_entry<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Arg<crate::sui::coin::Coin<crate::sui::sui::SUI>>,
            p2: Arg<Address>,
        ) -> Arg<crate::sui_system::staking_pool::StakedSui> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_add_stake_non_entry").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                )
                .into()
        }
        pub fn request_add_validator<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
        ) {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_add_validator").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                );
        }
        pub fn request_add_validator_candidate<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Arg<Vec<u8>>,
            p2: Arg<Vec<u8>>,
            p3: Arg<Vec<u8>>,
            p4: Arg<Vec<u8>>,
            p5: Arg<Vec<u8>>,
            p6: Arg<Vec<u8>>,
            p7: Arg<Vec<u8>>,
            p8: Arg<Vec<u8>>,
            p9: Arg<Vec<u8>>,
            p10: Arg<Vec<u8>>,
            p11: Arg<Vec<u8>>,
            p12: Arg<Vec<u8>>,
            p13: Arg<u64>,
            p14: Arg<u64>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            let p3 = p3.resolve_arg(builder);
            let p4 = p4.resolve_arg(builder);
            let p5 = p5.resolve_arg(builder);
            let p6 = p6.resolve_arg(builder);
            let p7 = p7.resolve_arg(builder);
            let p8 = p8.resolve_arg(builder);
            let p9 = p9.resolve_arg(builder);
            let p10 = p10.resolve_arg(builder);
            let p11 = p11.resolve_arg(builder);
            let p12 = p12.resolve_arg(builder);
            let p13 = p13.resolve_arg(builder);
            let p14 = p14.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_add_validator_candidate").unwrap(),
                        vec![],
                    ),
                    vec![
                        p0.into(), p1.into(), p2.into(), p3.into(), p4.into(), p5.into(),
                        p6.into(), p7.into(), p8.into(), p9.into(), p10.into(), p11
                        .into(), p12.into(), p13.into(), p14.into()
                    ],
                );
        }
        pub fn request_remove_validator<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
        ) {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_remove_validator").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                );
        }
        pub fn request_remove_validator_candidate<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
        ) {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_remove_validator_candidate")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                );
        }
        pub fn request_set_commission_rate<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Arg<u64>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_set_commission_rate").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn request_set_gas_price<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Ref<
                'a,
                crate::sui_system::validator_cap::UnverifiedValidatorOperationCap,
            >,
            p2: Arg<u64>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_set_gas_price").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                );
        }
        pub fn request_withdraw_stake<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Arg<crate::sui_system::staking_pool::StakedSui>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_withdraw_stake").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn request_withdraw_stake_non_entry<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Arg<crate::sui_system::staking_pool::StakedSui>,
        ) -> Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_withdraw_stake_non_entry")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn rotate_operation_cap<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
        ) {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("rotate_operation_cap").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                );
        }
        pub fn set_candidate_validator_commission_rate<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Arg<u64>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("set_candidate_validator_commission_rate")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn set_candidate_validator_gas_price<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Ref<
                'a,
                crate::sui_system::validator_cap::UnverifiedValidatorOperationCap,
            >,
            p2: Arg<u64>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("set_candidate_validator_gas_price")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                );
        }
        pub fn store_execution_time_estimates<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("store_execution_time_estimates").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn undo_report_validator<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Ref<
                'a,
                crate::sui_system::validator_cap::UnverifiedValidatorOperationCap,
            >,
            p2: Arg<Address>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("undo_report_validator").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                );
        }
        pub fn update_candidate_validator_network_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str(
                                "update_candidate_validator_network_address",
                            )
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_candidate_validator_network_pubkey<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_candidate_validator_network_pubkey")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_candidate_validator_p2p_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_candidate_validator_p2p_address")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_candidate_validator_primary_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str(
                                "update_candidate_validator_primary_address",
                            )
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_candidate_validator_protocol_pubkey<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Arg<Vec<u8>>,
            p2: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str(
                                "update_candidate_validator_protocol_pubkey",
                            )
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                );
        }
        pub fn update_candidate_validator_worker_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_candidate_validator_worker_address")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_candidate_validator_worker_pubkey<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_candidate_validator_worker_pubkey")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_validator_description<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_validator_description").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_validator_image_url<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_validator_image_url").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_validator_name<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_validator_name").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_validator_next_epoch_network_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str(
                                "update_validator_next_epoch_network_address",
                            )
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_validator_next_epoch_network_pubkey<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str(
                                "update_validator_next_epoch_network_pubkey",
                            )
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_validator_next_epoch_p2p_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_validator_next_epoch_p2p_address")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_validator_next_epoch_primary_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str(
                                "update_validator_next_epoch_primary_address",
                            )
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_validator_next_epoch_protocol_pubkey<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Arg<Vec<u8>>,
            p2: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str(
                                "update_validator_next_epoch_protocol_pubkey",
                            )
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                );
        }
        pub fn update_validator_next_epoch_worker_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str(
                                "update_validator_next_epoch_worker_address",
                            )
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_validator_next_epoch_worker_pubkey<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_validator_next_epoch_worker_pubkey")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_validator_project_url<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_validator_project_url").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn validator_address_by_pool_id<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
            p1: Ref<'a, ObjectId>,
        ) -> Arg<Address> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("validator_address_by_pool_id").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn validator_voting_powers<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::sui_system::SuiSystemState>,
        ) -> Arg<crate::sui::vec_map::VecMap<Address, u64>> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("validator_voting_powers").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
    }
    pub mod sui_system_state_inner {
        use std::str::FromStr;
        use move_binding_derive::{MoveStruct, Key};
        use move_types::{MoveType, Address, Identifier, ObjectId};
        use move_types::functions::{Arg, Ref, MutRef};
        pub const PACKAGE_ID: Address = Address::new([
            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 3u8,
        ]);
        pub const MODULE_NAME: &str = "sui_system_state_inner";
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct)]
        pub struct SuiSystemStateInner {
            pub epoch: u64,
            pub protocol_version: u64,
            pub system_state_version: u64,
            pub validators: crate::sui_system::validator_set::ValidatorSet,
            pub storage_fund: crate::sui_system::storage_fund::StorageFund,
            pub parameters: crate::sui_system::sui_system_state_inner::SystemParameters,
            pub reference_gas_price: u64,
            pub validator_report_records: crate::sui::vec_map::VecMap<
                Address,
                crate::sui::vec_set::VecSet<Address>,
            >,
            pub stake_subsidy: crate::sui_system::stake_subsidy::StakeSubsidy,
            pub safe_mode: bool,
            pub safe_mode_storage_rewards: crate::sui::balance::Balance<
                crate::sui::sui::SUI,
            >,
            pub safe_mode_computation_rewards: crate::sui::balance::Balance<
                crate::sui::sui::SUI,
            >,
            pub safe_mode_storage_rebates: u64,
            pub safe_mode_non_refundable_storage_fee: u64,
            pub epoch_start_timestamp_ms: u64,
            pub extra_fields: crate::sui::bag::Bag,
        }
        impl SuiSystemStateInner {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct)]
        pub struct SuiSystemStateInnerV2 {
            pub epoch: u64,
            pub protocol_version: u64,
            pub system_state_version: u64,
            pub validators: crate::sui_system::validator_set::ValidatorSet,
            pub storage_fund: crate::sui_system::storage_fund::StorageFund,
            pub parameters: crate::sui_system::sui_system_state_inner::SystemParametersV2,
            pub reference_gas_price: u64,
            pub validator_report_records: crate::sui::vec_map::VecMap<
                Address,
                crate::sui::vec_set::VecSet<Address>,
            >,
            pub stake_subsidy: crate::sui_system::stake_subsidy::StakeSubsidy,
            pub safe_mode: bool,
            pub safe_mode_storage_rewards: crate::sui::balance::Balance<
                crate::sui::sui::SUI,
            >,
            pub safe_mode_computation_rewards: crate::sui::balance::Balance<
                crate::sui::sui::SUI,
            >,
            pub safe_mode_storage_rebates: u64,
            pub safe_mode_non_refundable_storage_fee: u64,
            pub epoch_start_timestamp_ms: u64,
            pub extra_fields: crate::sui::bag::Bag,
        }
        impl SuiSystemStateInnerV2 {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct)]
        pub struct SystemEpochInfoEvent {
            pub epoch: u64,
            pub protocol_version: u64,
            pub reference_gas_price: u64,
            pub total_stake: u64,
            pub storage_fund_reinvestment: u64,
            pub storage_charge: u64,
            pub storage_rebate: u64,
            pub storage_fund_balance: u64,
            pub stake_subsidy_amount: u64,
            pub total_gas_fees: u64,
            pub total_stake_rewards_distributed: u64,
            pub leftover_storage_fund_inflow: u64,
        }
        impl SystemEpochInfoEvent {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct)]
        pub struct SystemParameters {
            pub epoch_duration_ms: u64,
            pub stake_subsidy_start_epoch: u64,
            pub max_validator_count: u64,
            pub min_validator_joining_stake: u64,
            pub validator_low_stake_threshold: u64,
            pub validator_very_low_stake_threshold: u64,
            pub validator_low_stake_grace_period: u64,
            pub extra_fields: crate::sui::bag::Bag,
        }
        impl SystemParameters {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct)]
        pub struct SystemParametersV2 {
            pub epoch_duration_ms: u64,
            pub stake_subsidy_start_epoch: u64,
            pub min_validator_count: u64,
            pub max_validator_count: u64,
            pub min_validator_joining_stake: u64,
            pub validator_low_stake_threshold: u64,
            pub validator_very_low_stake_threshold: u64,
            pub validator_low_stake_grace_period: u64,
            pub extra_fields: crate::sui::bag::Bag,
        }
        impl SystemParametersV2 {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        pub fn active_validator_addresses<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2>,
        ) -> Arg<Vec<Address>> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("active_validator_addresses").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn active_validator_voting_powers<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2>,
        ) -> Arg<crate::sui::vec_map::VecMap<Address, u64>> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("active_validator_voting_powers").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn advance_epoch<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<u64>,
            p2: Arg<u64>,
            p3: Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>>,
            p4: Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>>,
            p5: Arg<u64>,
            p6: Arg<u64>,
            p7: Arg<u64>,
            p8: Arg<u64>,
            p9: Arg<u64>,
        ) -> Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            let p3 = p3.resolve_arg(builder);
            let p4 = p4.resolve_arg(builder);
            let p5 = p5.resolve_arg(builder);
            let p6 = p6.resolve_arg(builder);
            let p7 = p7.resolve_arg(builder);
            let p8 = p8.resolve_arg(builder);
            let p9 = p9.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("advance_epoch").unwrap(),
                        vec![],
                    ),
                    vec![
                        p0.into(), p1.into(), p2.into(), p3.into(), p4.into(), p5.into(),
                        p6.into(), p7.into(), p8.into(), p9.into()
                    ],
                )
                .into()
        }
        pub fn convert_to_fungible_staked_sui<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<crate::sui_system::staking_pool::StakedSui>,
        ) -> Arg<crate::sui_system::staking_pool::FungibleStakedSui> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("convert_to_fungible_staked_sui").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn create<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Arg<Vec<crate::sui_system::validator::Validator>>,
            p1: Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>>,
            p2: Arg<u64>,
            p3: Arg<u64>,
            p4: Arg<crate::sui_system::sui_system_state_inner::SystemParameters>,
            p5: Arg<crate::sui_system::stake_subsidy::StakeSubsidy>,
        ) -> Arg<crate::sui_system::sui_system_state_inner::SuiSystemStateInner> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            let p3 = p3.resolve_arg(builder);
            let p4 = p4.resolve_arg(builder);
            let p5 = p5.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("create").unwrap(),
                        vec![],
                    ),
                    vec![
                        p0.into(), p1.into(), p2.into(), p3.into(), p4.into(), p5.into()
                    ],
                )
                .into()
        }
        pub fn create_system_parameters<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Arg<u64>,
            p1: Arg<u64>,
            p2: Arg<u64>,
            p3: Arg<u64>,
            p4: Arg<u64>,
            p5: Arg<u64>,
            p6: Arg<u64>,
        ) -> Arg<crate::sui_system::sui_system_state_inner::SystemParameters> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            let p3 = p3.resolve_arg(builder);
            let p4 = p4.resolve_arg(builder);
            let p5 = p5.resolve_arg(builder);
            let p6 = p6.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("create_system_parameters").unwrap(),
                        vec![],
                    ),
                    vec![
                        p0.into(), p1.into(), p2.into(), p3.into(), p4.into(), p5.into(),
                        p6.into()
                    ],
                )
                .into()
        }
        pub fn epoch<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("epoch").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn epoch_start_timestamp_ms<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("epoch_start_timestamp_ms").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn extract_coin_balance<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Arg<Vec<crate::sui::coin::Coin<crate::sui::sui::SUI>>>,
            p1: Arg<Option<u64>>,
        ) -> Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("extract_coin_balance").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn genesis_system_state_version(
            builder: &mut sui_transaction_builder::TransactionBuilder,
        ) -> Arg<u64> {
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("genesis_system_state_version").unwrap(),
                        vec![],
                    ),
                    vec![],
                )
                .into()
        }
        pub fn get_reporters_of<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<Address>,
        ) -> Arg<crate::sui::vec_set::VecSet<Address>> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("get_reporters_of").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn get_storage_fund_object_rebates<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("get_storage_fund_object_rebates").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn get_storage_fund_total_balance<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("get_storage_fund_total_balance").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn pool_exchange_rates<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Ref<'a, ObjectId>,
        ) -> Ref<
            'a,
            crate::sui::table::Table<
                u64,
                crate::sui_system::staking_pool::PoolTokenExchangeRate,
            >,
        > {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("pool_exchange_rates").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn protocol_version<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("protocol_version").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn redeem_fungible_staked_sui<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<crate::sui_system::staking_pool::FungibleStakedSui>,
        ) -> Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("redeem_fungible_staked_sui").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn report_validator<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Ref<
                'a,
                crate::sui_system::validator_cap::UnverifiedValidatorOperationCap,
            >,
            p2: Arg<Address>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("report_validator").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                );
        }
        pub fn report_validator_impl<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Arg<crate::sui_system::validator_cap::ValidatorOperationCap>,
            p1: Arg<Address>,
            p2: MutRef<
                'a,
                crate::sui::vec_map::VecMap<
                    Address,
                    crate::sui::vec_set::VecSet<Address>,
                >,
            >,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("report_validator_impl").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                );
        }
        pub fn request_add_stake<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<crate::sui::coin::Coin<crate::sui::sui::SUI>>,
            p2: Arg<Address>,
        ) -> Arg<crate::sui_system::staking_pool::StakedSui> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_add_stake").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                )
                .into()
        }
        pub fn request_add_stake_mul_coin<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<Vec<crate::sui::coin::Coin<crate::sui::sui::SUI>>>,
            p2: Arg<Option<u64>>,
            p3: Arg<Address>,
        ) -> Arg<crate::sui_system::staking_pool::StakedSui> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            let p3 = p3.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_add_stake_mul_coin").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into(), p3.into()],
                )
                .into()
        }
        pub fn request_add_validator<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
        ) {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_add_validator").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                );
        }
        pub fn request_add_validator_candidate<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<Vec<u8>>,
            p2: Arg<Vec<u8>>,
            p3: Arg<Vec<u8>>,
            p4: Arg<Vec<u8>>,
            p5: Arg<Vec<u8>>,
            p6: Arg<Vec<u8>>,
            p7: Arg<Vec<u8>>,
            p8: Arg<Vec<u8>>,
            p9: Arg<Vec<u8>>,
            p10: Arg<Vec<u8>>,
            p11: Arg<Vec<u8>>,
            p12: Arg<Vec<u8>>,
            p13: Arg<u64>,
            p14: Arg<u64>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            let p3 = p3.resolve_arg(builder);
            let p4 = p4.resolve_arg(builder);
            let p5 = p5.resolve_arg(builder);
            let p6 = p6.resolve_arg(builder);
            let p7 = p7.resolve_arg(builder);
            let p8 = p8.resolve_arg(builder);
            let p9 = p9.resolve_arg(builder);
            let p10 = p10.resolve_arg(builder);
            let p11 = p11.resolve_arg(builder);
            let p12 = p12.resolve_arg(builder);
            let p13 = p13.resolve_arg(builder);
            let p14 = p14.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_add_validator_candidate").unwrap(),
                        vec![],
                    ),
                    vec![
                        p0.into(), p1.into(), p2.into(), p3.into(), p4.into(), p5.into(),
                        p6.into(), p7.into(), p8.into(), p9.into(), p10.into(), p11
                        .into(), p12.into(), p13.into(), p14.into()
                    ],
                );
        }
        pub fn request_remove_validator<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
        ) {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_remove_validator").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                );
        }
        pub fn request_remove_validator_candidate<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
        ) {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_remove_validator_candidate")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                );
        }
        pub fn request_set_commission_rate<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<u64>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_set_commission_rate").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn request_set_gas_price<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Ref<
                'a,
                crate::sui_system::validator_cap::UnverifiedValidatorOperationCap,
            >,
            p2: Arg<u64>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_set_gas_price").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                );
        }
        pub fn request_withdraw_stake<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<crate::sui_system::staking_pool::StakedSui>,
        ) -> Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_withdraw_stake").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn rotate_operation_cap<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
        ) {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("rotate_operation_cap").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                );
        }
        pub fn set_candidate_validator_commission_rate<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<u64>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("set_candidate_validator_commission_rate")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn set_candidate_validator_gas_price<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Ref<
                'a,
                crate::sui_system::validator_cap::UnverifiedValidatorOperationCap,
            >,
            p2: Arg<u64>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("set_candidate_validator_gas_price")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                );
        }
        pub fn store_execution_time_estimates<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("store_execution_time_estimates").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn system_state_version<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("system_state_version").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn undo_report_validator<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Ref<
                'a,
                crate::sui_system::validator_cap::UnverifiedValidatorOperationCap,
            >,
            p2: Arg<Address>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("undo_report_validator").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                );
        }
        pub fn undo_report_validator_impl<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Arg<crate::sui_system::validator_cap::ValidatorOperationCap>,
            p1: Arg<Address>,
            p2: MutRef<
                'a,
                crate::sui::vec_map::VecMap<
                    Address,
                    crate::sui::vec_set::VecSet<Address>,
                >,
            >,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("undo_report_validator_impl").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                );
        }
        pub fn update_candidate_validator_network_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str(
                                "update_candidate_validator_network_address",
                            )
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_candidate_validator_network_pubkey<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_candidate_validator_network_pubkey")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_candidate_validator_p2p_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_candidate_validator_p2p_address")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_candidate_validator_primary_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str(
                                "update_candidate_validator_primary_address",
                            )
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_candidate_validator_protocol_pubkey<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<Vec<u8>>,
            p2: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str(
                                "update_candidate_validator_protocol_pubkey",
                            )
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                );
        }
        pub fn update_candidate_validator_worker_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_candidate_validator_worker_address")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_candidate_validator_worker_pubkey<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_candidate_validator_worker_pubkey")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_validator_description<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_validator_description").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_validator_image_url<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_validator_image_url").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_validator_name<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_validator_name").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_validator_next_epoch_network_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str(
                                "update_validator_next_epoch_network_address",
                            )
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_validator_next_epoch_network_pubkey<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str(
                                "update_validator_next_epoch_network_pubkey",
                            )
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_validator_next_epoch_p2p_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_validator_next_epoch_p2p_address")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_validator_next_epoch_primary_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str(
                                "update_validator_next_epoch_primary_address",
                            )
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_validator_next_epoch_protocol_pubkey<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<Vec<u8>>,
            p2: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str(
                                "update_validator_next_epoch_protocol_pubkey",
                            )
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                );
        }
        pub fn update_validator_next_epoch_worker_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str(
                                "update_validator_next_epoch_worker_address",
                            )
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_validator_next_epoch_worker_pubkey<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_validator_next_epoch_worker_pubkey")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_validator_project_url<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_validator_project_url").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn v1_to_v2(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Arg<crate::sui_system::sui_system_state_inner::SuiSystemStateInner>,
        ) -> Arg<crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("v1_to_v2").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn validator_address_by_pool_id<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Ref<'a, ObjectId>,
        ) -> Arg<Address> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("validator_address_by_pool_id").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn validator_stake_amount<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<Address>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("validator_stake_amount").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn validator_staking_pool_id<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<
                'a,
                crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2,
            >,
            p1: Arg<Address>,
        ) -> Arg<ObjectId> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("validator_staking_pool_id").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn validator_staking_pool_mappings<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::sui_system_state_inner::SuiSystemStateInnerV2>,
        ) -> Ref<'a, crate::sui::table::Table<ObjectId, Address>> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("validator_staking_pool_mappings").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
    }
    pub mod validator {
        use std::str::FromStr;
        use move_binding_derive::{MoveStruct, Key};
        use move_types::{MoveType, Address, Identifier, ObjectId};
        use move_types::functions::{Arg, Ref, MutRef};
        pub const PACKAGE_ID: Address = Address::new([
            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 3u8,
        ]);
        pub const MODULE_NAME: &str = "validator";
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct)]
        pub struct ConvertingToFungibleStakedSuiEvent {
            pub pool_id: ObjectId,
            pub stake_activation_epoch: u64,
            pub staked_sui_principal_amount: u64,
            pub fungible_staked_sui_amount: u64,
        }
        impl ConvertingToFungibleStakedSuiEvent {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct)]
        pub struct RedeemingFungibleStakedSuiEvent {
            pub pool_id: ObjectId,
            pub fungible_staked_sui_amount: u64,
            pub sui_amount: u64,
        }
        impl RedeemingFungibleStakedSuiEvent {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct)]
        pub struct StakingRequestEvent {
            pub pool_id: ObjectId,
            pub validator_address: Address,
            pub staker_address: Address,
            pub epoch: u64,
            pub amount: u64,
        }
        impl StakingRequestEvent {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct)]
        pub struct UnstakingRequestEvent {
            pub pool_id: ObjectId,
            pub validator_address: Address,
            pub staker_address: Address,
            pub stake_activation_epoch: u64,
            pub unstaking_epoch: u64,
            pub principal_amount: u64,
            pub reward_amount: u64,
        }
        impl UnstakingRequestEvent {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct)]
        pub struct Validator {
            pub metadata: crate::sui_system::validator::ValidatorMetadata,
            pub voting_power: u64,
            pub operation_cap_id: ObjectId,
            pub gas_price: u64,
            pub staking_pool: crate::sui_system::staking_pool::StakingPool,
            pub commission_rate: u64,
            pub next_epoch_stake: u64,
            pub next_epoch_gas_price: u64,
            pub next_epoch_commission_rate: u64,
            pub extra_fields: crate::sui::bag::Bag,
        }
        impl Validator {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct)]
        pub struct ValidatorMetadata {
            pub sui_address: Address,
            pub protocol_pubkey_bytes: Vec<u8>,
            pub network_pubkey_bytes: Vec<u8>,
            pub worker_pubkey_bytes: Vec<u8>,
            pub proof_of_possession: Vec<u8>,
            pub name: String,
            pub description: String,
            pub image_url: crate::sui::url::Url,
            pub project_url: crate::sui::url::Url,
            pub net_address: String,
            pub p2p_address: String,
            pub primary_address: String,
            pub worker_address: String,
            pub next_epoch_protocol_pubkey_bytes: Option<Vec<u8>>,
            pub next_epoch_proof_of_possession: Option<Vec<u8>>,
            pub next_epoch_network_pubkey_bytes: Option<Vec<u8>>,
            pub next_epoch_worker_pubkey_bytes: Option<Vec<u8>>,
            pub next_epoch_net_address: Option<String>,
            pub next_epoch_p2p_address: Option<String>,
            pub next_epoch_primary_address: Option<String>,
            pub next_epoch_worker_address: Option<String>,
            pub extra_fields: crate::sui::bag::Bag,
        }
        impl ValidatorMetadata {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        pub fn activate<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<u64>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("activate").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn adjust_stake_and_gas_price<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
        ) {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("adjust_stake_and_gas_price").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                );
        }
        pub fn commission_rate<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("commission_rate").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn convert_to_fungible_staked_sui<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<crate::sui_system::staking_pool::StakedSui>,
        ) -> Arg<crate::sui_system::staking_pool::FungibleStakedSui> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("convert_to_fungible_staked_sui").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn deactivate<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<u64>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("deactivate").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn deposit_stake_rewards<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("deposit_stake_rewards").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn description<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Ref<'a, String> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("description").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn effectuate_staged_metadata<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
        ) {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("effectuate_staged_metadata").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                );
        }
        pub fn gas_price<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("gas_price").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn get_staking_pool_ref<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Ref<'a, crate::sui_system::staking_pool::StakingPool> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("get_staking_pool_ref").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn image_url<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Ref<'a, crate::sui::url::Url> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("image_url").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn is_duplicate<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
            p1: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Arg<bool> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("is_duplicate").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn is_equal_some<'a, T0: MoveType>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, Option<T0>>,
            p1: Ref<'a, Option<T0>>,
        ) -> Arg<bool> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("is_equal_some").unwrap(),
                        vec![T0::type_()],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn is_equal_some_and_value<'a, T0: MoveType>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, Option<T0>>,
            p1: Ref<'a, T0>,
        ) -> Arg<bool> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("is_equal_some_and_value").unwrap(),
                        vec![T0::type_()],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn is_preactive<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Arg<bool> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("is_preactive").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn metadata<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Ref<'a, crate::sui_system::validator::ValidatorMetadata> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("metadata").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn name<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Ref<'a, String> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("name").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn network_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Ref<'a, String> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("network_address").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn network_pubkey_bytes<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Ref<'a, Vec<u8>> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("network_pubkey_bytes").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn new<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Arg<Address>,
            p1: Arg<Vec<u8>>,
            p2: Arg<Vec<u8>>,
            p3: Arg<Vec<u8>>,
            p4: Arg<Vec<u8>>,
            p5: Arg<Vec<u8>>,
            p6: Arg<Vec<u8>>,
            p7: Arg<Vec<u8>>,
            p8: Arg<Vec<u8>>,
            p9: Arg<Vec<u8>>,
            p10: Arg<Vec<u8>>,
            p11: Arg<Vec<u8>>,
            p12: Arg<Vec<u8>>,
            p13: Arg<u64>,
            p14: Arg<u64>,
        ) -> Arg<crate::sui_system::validator::Validator> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            let p3 = p3.resolve_arg(builder);
            let p4 = p4.resolve_arg(builder);
            let p5 = p5.resolve_arg(builder);
            let p6 = p6.resolve_arg(builder);
            let p7 = p7.resolve_arg(builder);
            let p8 = p8.resolve_arg(builder);
            let p9 = p9.resolve_arg(builder);
            let p10 = p10.resolve_arg(builder);
            let p11 = p11.resolve_arg(builder);
            let p12 = p12.resolve_arg(builder);
            let p13 = p13.resolve_arg(builder);
            let p14 = p14.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("new").unwrap(),
                        vec![],
                    ),
                    vec![
                        p0.into(), p1.into(), p2.into(), p3.into(), p4.into(), p5.into(),
                        p6.into(), p7.into(), p8.into(), p9.into(), p10.into(), p11
                        .into(), p12.into(), p13.into(), p14.into()
                    ],
                )
                .into()
        }
        pub fn new_from_metadata<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Arg<crate::sui_system::validator::ValidatorMetadata>,
            p1: Arg<u64>,
            p2: Arg<u64>,
        ) -> Arg<crate::sui_system::validator::Validator> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("new_from_metadata").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                )
                .into()
        }
        pub fn new_metadata(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Arg<Address>,
            p1: Arg<Vec<u8>>,
            p2: Arg<Vec<u8>>,
            p3: Arg<Vec<u8>>,
            p4: Arg<Vec<u8>>,
            p5: Arg<String>,
            p6: Arg<String>,
            p7: Arg<crate::sui::url::Url>,
            p8: Arg<crate::sui::url::Url>,
            p9: Arg<String>,
            p10: Arg<String>,
            p11: Arg<String>,
            p12: Arg<String>,
            p13: Arg<crate::sui::bag::Bag>,
        ) -> Arg<crate::sui_system::validator::ValidatorMetadata> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            let p3 = p3.resolve_arg(builder);
            let p4 = p4.resolve_arg(builder);
            let p5 = p5.resolve_arg(builder);
            let p6 = p6.resolve_arg(builder);
            let p7 = p7.resolve_arg(builder);
            let p8 = p8.resolve_arg(builder);
            let p9 = p9.resolve_arg(builder);
            let p10 = p10.resolve_arg(builder);
            let p11 = p11.resolve_arg(builder);
            let p12 = p12.resolve_arg(builder);
            let p13 = p13.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("new_metadata").unwrap(),
                        vec![],
                    ),
                    vec![
                        p0.into(), p1.into(), p2.into(), p3.into(), p4.into(), p5.into(),
                        p6.into(), p7.into(), p8.into(), p9.into(), p10.into(), p11
                        .into(), p12.into(), p13.into()
                    ],
                )
                .into()
        }
        pub fn new_unverified_validator_operation_cap_and_transfer<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
        ) {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str(
                                "new_unverified_validator_operation_cap_and_transfer",
                            )
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                );
        }
        pub fn next_epoch_gas_price<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("next_epoch_gas_price").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn next_epoch_network_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Ref<'a, Option<String>> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("next_epoch_network_address").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn next_epoch_network_pubkey_bytes<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Ref<'a, Option<Vec<u8>>> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("next_epoch_network_pubkey_bytes").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn next_epoch_p2p_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Ref<'a, Option<String>> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("next_epoch_p2p_address").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn next_epoch_primary_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Ref<'a, Option<String>> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("next_epoch_primary_address").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn next_epoch_proof_of_possession<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Ref<'a, Option<Vec<u8>>> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("next_epoch_proof_of_possession").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn next_epoch_protocol_pubkey_bytes<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Ref<'a, Option<Vec<u8>>> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("next_epoch_protocol_pubkey_bytes")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn next_epoch_worker_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Ref<'a, Option<String>> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("next_epoch_worker_address").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn next_epoch_worker_pubkey_bytes<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Ref<'a, Option<Vec<u8>>> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("next_epoch_worker_pubkey_bytes").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn operation_cap_id<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Ref<'a, ObjectId> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("operation_cap_id").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn p2p_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Ref<'a, String> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("p2p_address").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn pending_stake_amount<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("pending_stake_amount").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn pending_stake_withdraw_amount<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("pending_stake_withdraw_amount").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn pool_token_exchange_rate_at_epoch<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
            p1: Arg<u64>,
        ) -> Arg<crate::sui_system::staking_pool::PoolTokenExchangeRate> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("pool_token_exchange_rate_at_epoch")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn primary_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Ref<'a, String> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("primary_address").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn process_pending_stakes_and_withdraws<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
        ) {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("process_pending_stakes_and_withdraws")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                );
        }
        pub fn project_url<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Ref<'a, crate::sui::url::Url> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("project_url").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn proof_of_possession<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Ref<'a, Vec<u8>> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("proof_of_possession").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn protocol_pubkey_bytes<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Ref<'a, Vec<u8>> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("protocol_pubkey_bytes").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn redeem_fungible_staked_sui<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<crate::sui_system::staking_pool::FungibleStakedSui>,
        ) -> Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("redeem_fungible_staked_sui").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn request_add_stake<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>>,
            p2: Arg<Address>,
        ) -> Arg<crate::sui_system::staking_pool::StakedSui> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_add_stake").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                )
                .into()
        }
        pub fn request_add_stake_at_genesis<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>>,
            p2: Arg<Address>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_add_stake_at_genesis").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                );
        }
        pub fn request_set_commission_rate<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<u64>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_set_commission_rate").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn request_set_gas_price<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<crate::sui_system::validator_cap::ValidatorOperationCap>,
            p2: Arg<u64>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_set_gas_price").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                );
        }
        pub fn request_withdraw_stake<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<crate::sui_system::staking_pool::StakedSui>,
        ) -> Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_withdraw_stake").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn set_candidate_commission_rate<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<u64>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("set_candidate_commission_rate").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn set_candidate_gas_price<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<crate::sui_system::validator_cap::ValidatorOperationCap>,
            p2: Arg<u64>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("set_candidate_gas_price").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                );
        }
        pub fn set_voting_power<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<u64>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("set_voting_power").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn stake_amount<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("stake_amount").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn staking_pool_id<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Arg<ObjectId> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("staking_pool_id").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn sui_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Arg<Address> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("sui_address").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn total_stake<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("total_stake").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn total_stake_amount<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("total_stake_amount").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn update_candidate_network_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_candidate_network_address")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_candidate_network_pubkey<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_candidate_network_pubkey").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_candidate_p2p_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_candidate_p2p_address").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_candidate_primary_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_candidate_primary_address")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_candidate_protocol_pubkey<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<Vec<u8>>,
            p2: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_candidate_protocol_pubkey")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                );
        }
        pub fn update_candidate_worker_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_candidate_worker_address").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_candidate_worker_pubkey<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_candidate_worker_pubkey").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_description<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_description").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_image_url<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_image_url").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_name<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_name").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_next_epoch_network_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_next_epoch_network_address")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_next_epoch_network_pubkey<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_next_epoch_network_pubkey")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_next_epoch_p2p_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_next_epoch_p2p_address").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_next_epoch_primary_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_next_epoch_primary_address")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_next_epoch_protocol_pubkey<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<Vec<u8>>,
            p2: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_next_epoch_protocol_pubkey")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                );
        }
        pub fn update_next_epoch_worker_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_next_epoch_worker_address")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_next_epoch_worker_pubkey<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_next_epoch_worker_pubkey").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn update_project_url<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator::Validator>,
            p1: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_project_url").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn validate_metadata<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::ValidatorMetadata>,
        ) {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("validate_metadata").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                );
        }
        pub fn validate_metadata_bcs(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Arg<Vec<u8>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("validate_metadata_bcs").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                );
        }
        pub fn voting_power<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("voting_power").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn worker_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Ref<'a, String> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("worker_address").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn worker_pubkey_bytes<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Ref<'a, Vec<u8>> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("worker_pubkey_bytes").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
    }
    pub mod validator_cap {
        use std::str::FromStr;
        use move_binding_derive::{MoveStruct, Key};
        use move_types::{MoveType, Address, Identifier, ObjectId};
        use move_types::functions::{Arg, Ref, MutRef};
        pub const PACKAGE_ID: Address = Address::new([
            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 3u8,
        ]);
        pub const MODULE_NAME: &str = "validator_cap";
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct, Key)]
        pub struct UnverifiedValidatorOperationCap {
            pub id: ObjectId,
            pub authorizer_validator_address: Address,
        }
        impl UnverifiedValidatorOperationCap {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct)]
        pub struct ValidatorOperationCap {
            pub authorizer_validator_address: Address,
        }
        impl ValidatorOperationCap {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        pub fn new_from_unverified<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<
                'a,
                crate::sui_system::validator_cap::UnverifiedValidatorOperationCap,
            >,
        ) -> Arg<crate::sui_system::validator_cap::ValidatorOperationCap> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("new_from_unverified").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn new_unverified_validator_operation_cap_and_transfer<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Arg<Address>,
        ) -> Arg<ObjectId> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str(
                                "new_unverified_validator_operation_cap_and_transfer",
                            )
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn unverified_operation_cap_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<
                'a,
                crate::sui_system::validator_cap::UnverifiedValidatorOperationCap,
            >,
        ) -> Ref<'a, Address> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("unverified_operation_cap_address")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn verified_operation_cap_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator_cap::ValidatorOperationCap>,
        ) -> Ref<'a, Address> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("verified_operation_cap_address").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
    }
    pub mod validator_set {
        use std::str::FromStr;
        use move_binding_derive::{MoveStruct, Key};
        use move_types::{MoveType, Address, Identifier, ObjectId};
        use move_types::functions::{Arg, Ref, MutRef};
        pub const PACKAGE_ID: Address = Address::new([
            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 3u8,
        ]);
        pub const MODULE_NAME: &str = "validator_set";
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct)]
        pub struct ValidatorEpochInfoEvent {
            pub epoch: u64,
            pub validator_address: Address,
            pub reference_gas_survey_quote: u64,
            pub stake: u64,
            pub commission_rate: u64,
            pub pool_staking_reward: u64,
            pub storage_fund_staking_reward: u64,
            pub pool_token_exchange_rate: crate::sui_system::staking_pool::PoolTokenExchangeRate,
            pub tallying_rule_reporters: Vec<Address>,
            pub tallying_rule_global_score: u64,
        }
        impl ValidatorEpochInfoEvent {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct)]
        pub struct ValidatorEpochInfoEventV2 {
            pub epoch: u64,
            pub validator_address: Address,
            pub reference_gas_survey_quote: u64,
            pub stake: u64,
            pub voting_power: u64,
            pub commission_rate: u64,
            pub pool_staking_reward: u64,
            pub storage_fund_staking_reward: u64,
            pub pool_token_exchange_rate: crate::sui_system::staking_pool::PoolTokenExchangeRate,
            pub tallying_rule_reporters: Vec<Address>,
            pub tallying_rule_global_score: u64,
        }
        impl ValidatorEpochInfoEventV2 {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct)]
        pub struct ValidatorJoinEvent {
            pub epoch: u64,
            pub validator_address: Address,
            pub staking_pool_id: ObjectId,
        }
        impl ValidatorJoinEvent {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct)]
        pub struct ValidatorLeaveEvent {
            pub epoch: u64,
            pub validator_address: Address,
            pub staking_pool_id: ObjectId,
            pub is_voluntary: bool,
        }
        impl ValidatorLeaveEvent {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct)]
        pub struct ValidatorSet {
            pub total_stake: u64,
            pub active_validators: Vec<crate::sui_system::validator::Validator>,
            pub pending_active_validators: crate::sui::table_vec::TableVec<
                crate::sui_system::validator::Validator,
            >,
            pub pending_removals: Vec<u64>,
            pub staking_pool_mappings: crate::sui::table::Table<ObjectId, Address>,
            pub inactive_validators: crate::sui::table::Table<
                ObjectId,
                crate::sui_system::validator_wrapper::ValidatorWrapper,
            >,
            pub validator_candidates: crate::sui::table::Table<
                Address,
                crate::sui_system::validator_wrapper::ValidatorWrapper,
            >,
            pub at_risk_validators: crate::sui::vec_map::VecMap<Address, u64>,
            pub extra_fields: crate::sui::bag::Bag,
        }
        impl ValidatorSet {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct)]
        pub struct VotingPowerAdmissionStartEpochKey {
            pub dummy_field: bool,
        }
        impl VotingPowerAdmissionStartEpochKey {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        pub fn active_validator_addresses<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator_set::ValidatorSet>,
        ) -> Arg<Vec<Address>> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("active_validator_addresses").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn active_validators<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator_set::ValidatorSet>,
        ) -> Ref<'a, Vec<crate::sui_system::validator::Validator>> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("active_validators").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn adjust_stake_and_gas_price<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, Vec<crate::sui_system::validator::Validator>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("adjust_stake_and_gas_price").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                );
        }
        pub fn advance_epoch<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: MutRef<'a, crate::sui::balance::Balance<crate::sui::sui::SUI>>,
            p2: MutRef<'a, crate::sui::balance::Balance<crate::sui::sui::SUI>>,
            p3: MutRef<
                'a,
                crate::sui::vec_map::VecMap<
                    Address,
                    crate::sui::vec_set::VecSet<Address>,
                >,
            >,
            p4: Arg<u64>,
            p5: Arg<u64>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            let p3 = p3.resolve_arg(builder);
            let p4 = p4.resolve_arg(builder);
            let p5 = p5.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("advance_epoch").unwrap(),
                        vec![],
                    ),
                    vec![
                        p0.into(), p1.into(), p2.into(), p3.into(), p4.into(), p5.into()
                    ],
                );
        }
        pub fn assert_no_pending_or_active_duplicates<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Ref<'a, crate::sui_system::validator::Validator>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("assert_no_pending_or_active_duplicates")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn calculate_total_stakes<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, Vec<crate::sui_system::validator::Validator>>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("calculate_total_stakes").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn can_join<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Arg<u64>,
        ) -> Arg<bool> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("can_join").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn clean_report_records_leaving_validator<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<
                'a,
                crate::sui::vec_map::VecMap<
                    Address,
                    crate::sui::vec_set::VecSet<Address>,
                >,
            >,
            p1: Arg<Address>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("clean_report_records_leaving_validator")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn compute_adjusted_reward_distribution<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, Vec<crate::sui_system::validator::Validator>>,
            p1: Arg<u64>,
            p2: Arg<u64>,
            p3: Arg<Vec<u64>>,
            p4: Arg<Vec<u64>>,
            p5: Arg<u64>,
            p6: Arg<crate::sui::vec_map::VecMap<u64, u64>>,
            p7: Arg<u64>,
            p8: Arg<crate::sui::vec_map::VecMap<u64, u64>>,
        ) -> Arg<Vec<u64>> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            let p3 = p3.resolve_arg(builder);
            let p4 = p4.resolve_arg(builder);
            let p5 = p5.resolve_arg(builder);
            let p6 = p6.resolve_arg(builder);
            let p7 = p7.resolve_arg(builder);
            let p8 = p8.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("compute_adjusted_reward_distribution")
                            .unwrap(),
                        vec![],
                    ),
                    vec![
                        p0.into(), p1.into(), p2.into(), p3.into(), p4.into(), p5.into(),
                        p6.into(), p7.into(), p8.into()
                    ],
                )
                .into()
        }
        pub fn compute_reward_adjustments<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Arg<Vec<u64>>,
            p1: Arg<u64>,
            p2: Ref<'a, Vec<u64>>,
            p3: Ref<'a, Vec<u64>>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            let p3 = p3.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("compute_reward_adjustments").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into(), p3.into()],
                )
                .into()
        }
        pub fn compute_slashed_validators<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Arg<
                crate::sui::vec_map::VecMap<
                    Address,
                    crate::sui::vec_set::VecSet<Address>,
                >,
            >,
        ) -> Arg<Vec<Address>> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("compute_slashed_validators").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn compute_unadjusted_reward_distribution<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, Vec<crate::sui_system::validator::Validator>>,
            p1: Arg<u64>,
            p2: Arg<u64>,
            p3: Arg<u64>,
        ) -> Arg<Vec<u64>> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            let p3 = p3.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("compute_unadjusted_reward_distribution")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into(), p3.into()],
                )
                .into()
        }
        pub fn convert_to_fungible_staked_sui<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Arg<crate::sui_system::staking_pool::StakedSui>,
        ) -> Arg<crate::sui_system::staking_pool::FungibleStakedSui> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("convert_to_fungible_staked_sui").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn count_duplicates_tablevec<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<
                'a,
                crate::sui::table_vec::TableVec<crate::sui_system::validator::Validator>,
            >,
            p1: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("count_duplicates_tablevec").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn count_duplicates_vec<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, Vec<crate::sui_system::validator::Validator>>,
            p1: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("count_duplicates_vec").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn derive_reference_gas_price<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator_set::ValidatorSet>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("derive_reference_gas_price").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn distribute_reward<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, Vec<crate::sui_system::validator::Validator>>,
            p1: Ref<'a, Vec<u64>>,
            p2: Ref<'a, Vec<u64>>,
            p3: MutRef<'a, crate::sui::balance::Balance<crate::sui::sui::SUI>>,
            p4: MutRef<'a, crate::sui::balance::Balance<crate::sui::sui::SUI>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            let p3 = p3.resolve_arg(builder);
            let p4 = p4.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("distribute_reward").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into(), p3.into(), p4.into()],
                );
        }
        pub fn effectuate_staged_metadata<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator_set::ValidatorSet>,
        ) {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("effectuate_staged_metadata").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                );
        }
        pub fn emit_validator_epoch_events<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Arg<u64>,
            p1: Ref<'a, Vec<crate::sui_system::validator::Validator>>,
            p2: Ref<'a, Vec<u64>>,
            p3: Ref<'a, Vec<u64>>,
            p4: Ref<
                'a,
                crate::sui::vec_map::VecMap<
                    Address,
                    crate::sui::vec_set::VecSet<Address>,
                >,
            >,
            p5: Ref<'a, Vec<Address>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            let p3 = p3.resolve_arg(builder);
            let p4 = p4.resolve_arg(builder);
            let p5 = p5.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("emit_validator_epoch_events").unwrap(),
                        vec![],
                    ),
                    vec![
                        p0.into(), p1.into(), p2.into(), p3.into(), p4.into(), p5.into()
                    ],
                );
        }
        pub fn find_validator<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, Vec<crate::sui_system::validator::Validator>>,
            p1: Arg<Address>,
        ) -> Arg<Option<u64>> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("find_validator").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn find_validator_from_table_vec<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<
                'a,
                crate::sui::table_vec::TableVec<crate::sui_system::validator::Validator>,
            >,
            p1: Arg<Address>,
        ) -> Arg<Option<u64>> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("find_validator_from_table_vec").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn get_active_or_pending_or_candidate_validator_mut<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Arg<Address>,
            p2: Arg<bool>,
        ) -> MutRef<'a, crate::sui_system::validator::Validator> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str(
                                "get_active_or_pending_or_candidate_validator_mut",
                            )
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                )
                .into()
        }
        pub fn get_active_or_pending_or_candidate_validator_ref<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Arg<Address>,
            p2: Arg<u8>,
        ) -> Ref<'a, crate::sui_system::validator::Validator> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str(
                                "get_active_or_pending_or_candidate_validator_ref",
                            )
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                )
                .into()
        }
        pub fn get_active_validator_ref<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Arg<Address>,
        ) -> Ref<'a, crate::sui_system::validator::Validator> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("get_active_validator_ref").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn get_candidate_or_active_validator_mut<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Arg<Address>,
        ) -> MutRef<'a, crate::sui_system::validator::Validator> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("get_candidate_or_active_validator_mut")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn get_pending_validator_ref<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Arg<Address>,
        ) -> Ref<'a, crate::sui_system::validator::Validator> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("get_pending_validator_ref").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn get_validator_indices<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, Vec<crate::sui_system::validator::Validator>>,
            p1: Ref<'a, Vec<Address>>,
        ) -> Arg<Vec<u64>> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("get_validator_indices").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn get_validator_mut<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, Vec<crate::sui_system::validator::Validator>>,
            p1: Arg<Address>,
        ) -> MutRef<'a, crate::sui_system::validator::Validator> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("get_validator_mut").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn get_validator_mut_with_ctx<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator_set::ValidatorSet>,
        ) -> MutRef<'a, crate::sui_system::validator::Validator> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("get_validator_mut_with_ctx").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn get_validator_mut_with_ctx_including_candidates<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator_set::ValidatorSet>,
        ) -> MutRef<'a, crate::sui_system::validator::Validator> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str(
                                "get_validator_mut_with_ctx_including_candidates",
                            )
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn get_validator_mut_with_verified_cap<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Ref<'a, crate::sui_system::validator_cap::ValidatorOperationCap>,
            p2: Arg<bool>,
        ) -> MutRef<'a, crate::sui_system::validator::Validator> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("get_validator_mut_with_verified_cap")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                )
                .into()
        }
        pub fn get_validator_ref<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, Vec<crate::sui_system::validator::Validator>>,
            p1: Arg<Address>,
        ) -> Ref<'a, crate::sui_system::validator::Validator> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("get_validator_ref").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn get_voting_power_thresholds<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator_set::ValidatorSet>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("get_voting_power_thresholds").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn is_active_validator<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Arg<Address>,
        ) -> Arg<bool> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("is_active_validator").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn is_active_validator_by_sui_address<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Arg<Address>,
        ) -> Arg<bool> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("is_active_validator_by_sui_address")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn is_at_risk_validator<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Arg<Address>,
        ) -> Arg<bool> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("is_at_risk_validator").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn is_duplicate_validator<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, Vec<crate::sui_system::validator::Validator>>,
            p1: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Arg<bool> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("is_duplicate_validator").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn is_duplicate_with_active_validator<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Arg<bool> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("is_duplicate_with_active_validator")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn is_duplicate_with_pending_validator<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Ref<'a, crate::sui_system::validator::Validator>,
        ) -> Arg<bool> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("is_duplicate_with_pending_validator")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn is_inactive_validator<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Arg<ObjectId>,
        ) -> Arg<bool> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("is_inactive_validator").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn is_validator_candidate<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Arg<Address>,
        ) -> Arg<bool> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("is_validator_candidate").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn new<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Arg<Vec<crate::sui_system::validator::Validator>>,
        ) -> Arg<crate::sui_system::validator_set::ValidatorSet> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("new").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn next_epoch_validator_count<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator_set::ValidatorSet>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("next_epoch_validator_count").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn pool_exchange_rates<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Ref<'a, ObjectId>,
        ) -> Ref<
            'a,
            crate::sui::table::Table<
                u64,
                crate::sui_system::staking_pool::PoolTokenExchangeRate,
            >,
        > {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("pool_exchange_rates").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn process_pending_removals<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: MutRef<
                'a,
                crate::sui::vec_map::VecMap<
                    Address,
                    crate::sui::vec_set::VecSet<Address>,
                >,
            >,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("process_pending_removals").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn process_pending_stakes_and_withdraws<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, Vec<crate::sui_system::validator::Validator>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("process_pending_stakes_and_withdraws")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                );
        }
        pub fn process_validator_departure<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Arg<crate::sui_system::validator::Validator>,
            p2: MutRef<
                'a,
                crate::sui::vec_map::VecMap<
                    Address,
                    crate::sui::vec_set::VecSet<Address>,
                >,
            >,
            p3: Arg<bool>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            let p3 = p3.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("process_validator_departure").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into(), p3.into()],
                )
                .into()
        }
        pub fn redeem_fungible_staked_sui<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Arg<crate::sui_system::staking_pool::FungibleStakedSui>,
        ) -> Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("redeem_fungible_staked_sui").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn request_add_stake<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Arg<Address>,
            p2: Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>>,
        ) -> Arg<crate::sui_system::staking_pool::StakedSui> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_add_stake").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                )
                .into()
        }
        pub fn request_add_validator<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator_set::ValidatorSet>,
        ) {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_add_validator").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                );
        }
        pub fn request_add_validator_candidate<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Arg<crate::sui_system::validator::Validator>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_add_validator_candidate").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn request_remove_validator<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator_set::ValidatorSet>,
        ) {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_remove_validator").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                );
        }
        pub fn request_remove_validator_candidate<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator_set::ValidatorSet>,
        ) {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_remove_validator_candidate")
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                );
        }
        pub fn request_set_commission_rate<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Arg<u64>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_set_commission_rate").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn request_withdraw_stake<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Arg<crate::sui_system::staking_pool::StakedSui>,
        ) -> Arg<crate::sui::balance::Balance<crate::sui::sui::SUI>> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("request_withdraw_stake").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn sort_removal_list<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, Vec<u64>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("sort_removal_list").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                );
        }
        pub fn staking_pool_mappings<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator_set::ValidatorSet>,
        ) -> Ref<'a, crate::sui::table::Table<ObjectId, Address>> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("staking_pool_mappings").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn sum_voting_power_by_addresses<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, Vec<crate::sui_system::validator::Validator>>,
            p1: Ref<'a, Vec<Address>>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("sum_voting_power_by_addresses").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn total_stake<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator_set::ValidatorSet>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("total_stake").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn update_validator_positions_and_calculate_total_stake<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Arg<u64>,
            p2: MutRef<
                'a,
                crate::sui::vec_map::VecMap<
                    Address,
                    crate::sui::vec_set::VecSet<Address>,
                >,
            >,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str(
                                "update_validator_positions_and_calculate_total_stake",
                            )
                            .unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                )
                .into()
        }
        pub fn validator_address_by_pool_id<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Ref<'a, ObjectId>,
        ) -> Arg<Address> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("validator_address_by_pool_id").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn validator_stake_amount<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Arg<Address>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("validator_stake_amount").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn validator_staking_pool_id<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Arg<Address>,
        ) -> Arg<ObjectId> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("validator_staking_pool_id").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn validator_total_stake_amount<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Arg<Address>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("validator_total_stake_amount").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn validator_voting_power<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Arg<Address>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("validator_voting_power").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn verify_cap<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator_set::ValidatorSet>,
            p1: Ref<
                'a,
                crate::sui_system::validator_cap::UnverifiedValidatorOperationCap,
            >,
            p2: Arg<u8>,
        ) -> Arg<crate::sui_system::validator_cap::ValidatorOperationCap> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("verify_cap").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                )
                .into()
        }
    }
    pub mod validator_wrapper {
        use std::str::FromStr;
        use move_binding_derive::{MoveStruct, Key};
        use move_types::{MoveType, Address, Identifier, ObjectId};
        use move_types::functions::{Arg, Ref, MutRef};
        pub const PACKAGE_ID: Address = Address::new([
            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 3u8,
        ]);
        pub const MODULE_NAME: &str = "validator_wrapper";
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct)]
        pub struct ValidatorWrapper {
            pub inner: crate::sui::versioned::Versioned,
        }
        impl ValidatorWrapper {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        pub fn create_v1<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Arg<crate::sui_system::validator::Validator>,
        ) -> Arg<crate::sui_system::validator_wrapper::ValidatorWrapper> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("create_v1").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn destroy(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Arg<crate::sui_system::validator_wrapper::ValidatorWrapper>,
        ) -> Arg<crate::sui_system::validator::Validator> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("destroy").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn load_validator_maybe_upgrade<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, crate::sui_system::validator_wrapper::ValidatorWrapper>,
        ) -> MutRef<'a, crate::sui_system::validator::Validator> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("load_validator_maybe_upgrade").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
        pub fn upgrade_to_latest<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator_wrapper::ValidatorWrapper>,
        ) {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("upgrade_to_latest").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                );
        }
        pub fn version<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, crate::sui_system::validator_wrapper::ValidatorWrapper>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("version").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                )
                .into()
        }
    }
    pub mod voting_power {
        use std::str::FromStr;
        use move_binding_derive::{MoveStruct, Key};
        use move_types::{MoveType, Address, Identifier, ObjectId};
        use move_types::functions::{Arg, Ref, MutRef};
        pub const PACKAGE_ID: Address = Address::new([
            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
            0u8, 3u8,
        ]);
        pub const MODULE_NAME: &str = "voting_power";
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct)]
        pub struct VotingPowerInfo {
            pub validator_index: u64,
            pub voting_power: u64,
        }
        impl VotingPowerInfo {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        #[derive(serde::Deserialize, serde::Serialize, Debug, MoveStruct)]
        pub struct VotingPowerInfoV2 {
            pub validator_index: u64,
            pub voting_power: u64,
            pub stake: u64,
        }
        impl VotingPowerInfoV2 {
            pub const TYPE_ORIGIN_ID: Address = Address::new([
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,
                0u8, 0u8, 0u8, 3u8,
            ]);
        }
        pub fn adjust_voting_power<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, Vec<crate::sui_system::voting_power::VotingPowerInfoV2>>,
            p1: Arg<u64>,
            p2: Arg<u64>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("adjust_voting_power").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                );
        }
        pub fn check_invariants<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, Vec<crate::sui_system::validator::Validator>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("check_invariants").unwrap(),
                        vec![],
                    ),
                    vec![p0.into()],
                );
        }
        pub fn derive_raw_voting_power(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Arg<u64>,
            p1: Arg<u64>,
        ) -> Arg<u64> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("derive_raw_voting_power").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                )
                .into()
        }
        pub fn init_voting_power_info<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: Ref<'a, Vec<crate::sui_system::validator::Validator>>,
            p1: Arg<u64>,
            p2: Arg<u64>,
        ) -> Arg<Vec<crate::sui_system::voting_power::VotingPowerInfoV2>> {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            let p2 = p2.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("init_voting_power_info").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into(), p2.into()],
                )
                .into()
        }
        pub fn insert<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, Vec<crate::sui_system::voting_power::VotingPowerInfoV2>>,
            p1: Arg<crate::sui_system::voting_power::VotingPowerInfoV2>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("insert").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn quorum_threshold(
            builder: &mut sui_transaction_builder::TransactionBuilder,
        ) -> Arg<u64> {
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("quorum_threshold").unwrap(),
                        vec![],
                    ),
                    vec![],
                )
                .into()
        }
        pub fn set_voting_power<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, Vec<crate::sui_system::validator::Validator>>,
            p1: Arg<u64>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("set_voting_power").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
        pub fn total_voting_power(
            builder: &mut sui_transaction_builder::TransactionBuilder,
        ) -> Arg<u64> {
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("total_voting_power").unwrap(),
                        vec![],
                    ),
                    vec![],
                )
                .into()
        }
        pub fn update_voting_power<'a>(
            builder: &mut sui_transaction_builder::TransactionBuilder,
            p0: MutRef<'a, Vec<crate::sui_system::validator::Validator>>,
            p1: Arg<Vec<crate::sui_system::voting_power::VotingPowerInfoV2>>,
        ) {
            let p0 = p0.resolve_arg(builder);
            let p1 = p1.resolve_arg(builder);
            builder
                .move_call(
                    sui_transaction_builder::Function::new(
                        PACKAGE_ID,
                        Identifier::from_str(MODULE_NAME).unwrap(),
                        Identifier::from_str("update_voting_power").unwrap(),
                        vec![],
                    ),
                    vec![p0.into(), p1.into()],
                );
        }
    }
}
